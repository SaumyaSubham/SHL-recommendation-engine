# -*- coding: utf-8 -*-
"""recommendation_engine.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h6gGz_sjwkLdOyRz3hKtX9HMVF8Dzyke
"""

# # Install Required Packages (if needed)
# !pip install pandas scikit-learn matplotlib seaborn faiss-cpu google-generativeai

import pandas as pd
import requests
from bs4 import BeautifulSoup
import google.generativeai as genai
import numpy as np
import faiss
from dotenv import load_dotenv
import os

# Load .env file
load_dotenv()


# --- STEP 1: Load Product Catalog Data ---
df = pd.read_csv("updated_file.csv")
df.dropna(subset=['Assessment Name'], inplace=True)

# --- STEP 2: Gemini API Setup ---
genai.configure(api_key=os.environ.get("GEMINI_API_KEY"))
model = genai.GenerativeModel("embedding-001")

def generate_embedding(text):
    try:
        response = genai.embed_content(
            model="models/embedding-001",
            content=text,
            task_type="retrieval_document"
        )
        return response['embedding']
    except Exception as e:
        print("Embedding failed:", e)
        return None

# --- STEP 3: Prepare Descriptions & Embeddings ---
# Generate embeddings for each assessment (only name and type used for simplicity)
import pickle
embeddings = []
metadata = []

print("Generating product embeddings...")
for _, row in df.iterrows():
    product_text = f"{row['Assessment Name']} {row['Test Type']}"
    embedding = generate_embedding(product_text)
    if embedding:
        embeddings.append(embedding)
        metadata.append({
            "name": row['Assessment Name'],
            "url": row['Assessment URL'],
            "remote": row['Remote Testing Support'],
            "adaptive": row['Adaptive/IRT Support'],
            "duration": row['Duration'],
            "type": row['Test Type']
        })

# Convert embeddings to numpy array
embedding_matrix = np.array(embeddings)

# Save embeddings and metadata
with open("product_embeddings.pkl", "wb") as f:
    pickle.dump((embedding_matrix, metadata), f)

print("✅ Embedding generation completed and saved.")

# --- STEP 4: Build FAISS Index ---
print("Loading product embeddings and building FAISS index...")

# Load embeddings and metadata
with open("product_embeddings.pkl", "rb") as f:
    embedding_matrix, metadata = pickle.load(f)

# Build FAISS index
index = faiss.IndexFlatL2(embedding_matrix.shape[1])
index.add(embedding_matrix)

print("✅ FAISS index built successfully.")

# --- STEP 5: Query Processing (Updated to use metadata instead of DataFrame) ---
import requests
from bs4 import BeautifulSoup

# Function to fetch and extract job description text from a URL
def get_jd_from_url(url):
    try:
        r = requests.get(url)
        soup = BeautifulSoup(r.text, 'html.parser')
        paragraphs = soup.find_all('p')
        text = " ".join(p.text for p in paragraphs if len(p.text) > 30)
        return text.strip()
    except:
        return ""

# Function to embed the query using Gemini (same as in Step 3)
def embed_text(text):
    try:
        response = genai.embed_content(
            model="models/embedding-001",
            content=text,
            task_type="retrieval_query"
        )
        return response['embedding']
    except Exception as e:
        print("Embedding query failed:", e)
        return None

# Recommendation function that performs similarity search and returns top results
def recommend_assessments(user_input, is_url=False, top_k=10):
    if is_url:
        user_input = get_jd_from_url(user_input)

    query_embedding = embed_text(user_input)
    if query_embedding is None:
        return []

    D, I = index.search(np.array([query_embedding]), top_k)

    recommendations = []
    for score, idx in zip(D[0], I[0]):
        item = metadata[idx]
        recommendations.append({
            "Assessment Name": item["name"],
            "Assessment URL": item["url"],
            "Remote Testing Support": item["remote"],
            "Adaptive/IRT Support": item["adaptive"],
            "Test Type": item["type"],
            "Duration": item["duration"],
        })

    return recommendations

# # --- STEP 6: Test Example ---
# if __name__ == '__main__':
#     query = "We are hiring for a sales executive role who needs strong interpersonal and communication skills."
#     results = recommend_assessments(query)

#     print("Top 3 Recmmendations:\n")
#     for rec in results[:3]:
#       print(f"Assessment Name: {rec['Assessment Name']}")
#       print(f"Assessment URL: {rec['Assessment URL']}")
#       print(f"Remote Testing Support: {rec['Remote Testing Support']}")
#       print(f"Adaptive/IRT Support: {rec['Adaptive/IRT Support']}")
#       print(f"Test Type: {rec['Test Type']}")
#       print(f"Duration: {rec['Duration']}\n")